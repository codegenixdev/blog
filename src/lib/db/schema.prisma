datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  username      String?   @unique
  password      String?
  firstName     String?
  lastName      String?
  name          String?
  role          String    @default("AUTHOR")
  isActive      Boolean   @default(true)
  image         String?
  emailVerified DateTime?

  // Relations
  articles       Article[]
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, username])
}

model Language {
  id         String     @id @default(uuid())
  code       String     @unique
  name       String
  isActive   Boolean    @default(true)
  articles   Article[]
  categories Category[]
  tags       Tag[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([code])
}

model Article {
  id          String                 @id @default(uuid())
  slug        String                 @unique
  title       String
  content     String
  excerpt     String?
  status      String                 @default("DRAFT")
  language    Language               @relation(fields: [languageId], references: [id])
  languageId  String
  author      User                   @relation(fields: [authorId], references: [id])
  authorId    String
  categories  CategoriesOnArticles[]
  tags        TagsOnArticles[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  publishedAt DateTime?

  @@index([slug, languageId])
  @@index([authorId])
}

model Category {
  id          String                 @id @default(uuid())
  name        String
  slug        String
  description String?
  language    Language               @relation(fields: [languageId], references: [id])
  languageId  String
  articles    CategoriesOnArticles[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@unique([slug, languageId])
  @@index([languageId])
}

model Tag {
  id         String           @id @default(uuid())
  name       String
  slug       String
  language   Language         @relation(fields: [languageId], references: [id])
  languageId String
  articles   TagsOnArticles[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@unique([slug, languageId])
  @@index([languageId])
}

model CategoriesOnArticles {
  article    Article  @relation(fields: [articleId], references: [id])
  articleId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime @default(now())

  @@id([articleId, categoryId])
  @@index([articleId])
  @@index([categoryId])
}

model TagsOnArticles {
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now())

  @@id([articleId, tagId])
  @@index([articleId])
  @@index([tagId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
